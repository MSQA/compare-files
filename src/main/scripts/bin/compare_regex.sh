#!/bin/bash
#===================================================================================================
#
#  Compare File Regex
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
function usage() {
    cat << __END__
$0 OPTION targetConfigPath

 OPTION
  -h, --help
    このメッセージを表示します。

  -config, --configFile
    /path/to/configFile
    設定ファイルのパスを指定します。


  ----- 以降の設定を指定すると、設定ファイルより優先されます。 -----

  -ignore, --ignoreItemList
    比較除外項目名をカンマ区切りで指定します。
    レイアウト定義の設定を上書きして、指定された項目の比較を除外します。
    デフォルトは 未設定 です。

  -layout, --overwriteLayoutDir
    ${CompareFiles_root}/config/compareFilesLayout 配下のレイアウト定義に加えて
    指定したディレクトリ配下のレイアウト定義を読込みます。
    同一の物理ファイル名正規表現を持つレイアウトが存在する場合、後勝ち で上書きします。
    ※例）config配下に「定義書から自動生成したレイアウト」を配置。
       テストで「共通適用するレイアウト」、「今回のケースだけに適用するレイアウト」
       を別ディレクトリで管理。実行時に上記の記載順に指定する。 など

  -d, --deleteWorkDir
    作業ディレクトリを削除する場合に指定します。
    デフォルトは、ONです。

  -s, --sorted
    比較対象ファイルが、比較キー項目でソート済の場合に指定します。
    内部的にソート後に、比較処理を行っているため、事前にソートされていると
    高速化が期待できます。
    デフォルトは、OFFです。

  -ch, --csvHeaderRow
    CSV / TSV ファイルの比較時に必須です。
    ヘッダー行番号を指定します。

  -cd, --csvDataStartRow
    CSV / TSV ファイルの比較時に必須です。
    データ開始行番号を指定します。

  -od, --outputDir
    出力ディレクトリを指定します。
    デフォルトは ${CompareFiles_root}/result です。

  -oc, --outputCharset
    出力ファイルの文字コードを指定します。
    デフォルトは MS932 です。

  -of, --compareResultFileName
    比較結果ファイル名を指定します。
    デフォルトは CompareSummary.csv です。

  -dfp, --compareDetailFilePrefix
    比較詳細ファイル名のプリフィックスを指定します。
    ファイル名の形式は ${プリフィックス}${比較対象ファイル名}.csv です。
    デフォルトは CompareDetail_ です。

  -ddo, --writeDiffOnly
    比較詳細ファイルの出力内容を 差分のみ にする場合に指定します。
    デフォルトは OFF です。

  -dpl, --leftPrefix
    比較詳細ファイルの差分出力で 左ファイルの項目を表示するときに利用する
    プリフィックスを指定します。
    デフォルトは L: です。

  -dpr, --rightPrefix
    比較詳細ファイルの差分出力で 右ファイルの項目を表示するときに利用する
    プリフィックスを指定します。
    デフォルトは R: です。

  -chunk, --chunkSize
    出力バッファサイズを行数で指定します。
    比較結果の出力時に、逐次で出力するとFileI/Oで処理時間がかさむため
    バッファリングしています。リソースや比較対象のデータサイズに合わせて
    サイズを調整することで高速化が期待できます。
    デフォルトは 1000 行です。

__END__
}


#---------------------------------------------------------------------------------------------------
#  定数
#---------------------------------------------------------------------------------------------------
# リターンコード
readonly RETCODE_SUCCESS=0
readonly RETCODE_WARN=3
readonly RETCODE_ERROR=6
# Javaリターンコード
readonly JAVA_RETCODE_SUCCESS=0
readonly JAVA_RETCODE_WARN=3
readonly JAVA_RETCODE_ERROR=6


#---------------------------------------------------------------------------------------------------
#  設定
#---------------------------------------------------------------------------------------------------
dir_before=`pwd`
cd `dirname $0`/..


#---------------------------------------------------------------------------------------------------
#  事前処理
#---------------------------------------------------------------------------------------------------
# 引数チェック
if [ $# -eq 0 -o "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
fi


#---------------------------------------------------------------------------------------------------
#  主処理
#---------------------------------------------------------------------------------------------------
# Java用環境変数設定
classpath=${CLASSPATH_COMPAREFILES}:${classpath}:.:`pwd`/config:`pwd`/lib/*:

# Java呼出し
cd ${dir_before}
java ${COMPAREFILES_JAVA_OPT} -cp ${classpath} -Dpid=$$ me.suwash.tools.comparefiles.main.CompareFileRegex "$@"
java_return_code=$?


#---------------------------------------------------------------------------------------------------
#  事後処理
#---------------------------------------------------------------------------------------------------
# 実行結果確認
if [ ${java_return_code} = ${JAVA_RETCODE_WARN} ]; then
    # warn
    exit ${RETCODE_WARN}

elif [ ${java_return_code} = ${JAVA_RETCODE_ERROR} ]; then
    # error
    exit ${RETCODE_ERROR}

else
    # success
    exit ${RETCODE_SUCCESS}
fi
